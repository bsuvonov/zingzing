// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: zingers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createZinger = `-- name: CreateZinger :one
INSERT INTO zingers (id, created_at, updated_at, body, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateZingerParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Body      string
	UserID    uuid.UUID
}

func (q *Queries) CreateZinger(ctx context.Context, arg CreateZingerParams) (Zinger, error) {
	row := q.db.QueryRowContext(ctx, createZinger,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Body,
		arg.UserID,
	)
	var i Zinger
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteZingerById = `-- name: DeleteZingerById :exec
DELETE FROM zingers WHERE id = $1
`

func (q *Queries) DeleteZingerById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteZingerById, id)
	return err
}

const getAllZingers = `-- name: GetAllZingers :many
SELECT id, created_at, updated_at, body, user_id FROM zingers ORDER BY created_at ASC
`

func (q *Queries) GetAllZingers(ctx context.Context) ([]Zinger, error) {
	rows, err := q.db.QueryContext(ctx, getAllZingers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zinger
	for rows.Next() {
		var i Zinger
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZingerById = `-- name: GetZingerById :one
SELECT id, created_at, updated_at, body, user_id FROM zingers WHERE id = $1
`

func (q *Queries) GetZingerById(ctx context.Context, id uuid.UUID) (Zinger, error) {
	row := q.db.QueryRowContext(ctx, getZingerById, id)
	var i Zinger
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getZingersByUser = `-- name: GetZingersByUser :many
SELECT id, created_at, updated_at, body, user_id FROM zingers WHERE user_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetZingersByUser(ctx context.Context, userID uuid.UUID) ([]Zinger, error) {
	rows, err := q.db.QueryContext(ctx, getZingersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zinger
	for rows.Next() {
		var i Zinger
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
